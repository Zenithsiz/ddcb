---
alias:
  # Commands
  ld: mips-linux-gnu-ld
  as: mips-linux-gnu-as
  objcopy: mips-linux-gnu-objcopy
  mkpsxiso: mkpsxiso
  cargo: cargo
  generate_linker_script: tools/generate_linker_symbols_script.py
  preprocess_asm: tools/preprocess_asm.py
  expand_asm: tools/expand_asm.py
  generate_iso_deps: tools/generate_iso_deps.py
  generate_compare_deps: tools/generate_compare_deps.py
  bspatch: bspatch
  sha256sum: sha256sum
  mkdrv: build/tools/dcb-mkdrv
  mkdrv-deps: build/tools/dcb-mkdrv-deps
  mkpak: build/tools/dcb-mkpak
  mkpak-deps: build/tools/dcb-mkpak-deps
  mkmsd: build/tools/dcb-mkmsd
  mk-card-table: build/tools/dcb-mk-card-table
  mk-deck-table: build/tools/dcb-mk-deck-table
  mkpsexe: build/tools/dcb-mkpsexe

  # Files
  checksums: checksums.sha256
  compare_deps: build/compare.d
  dcb_bin: build/dcb.bin
  dcb_elf: build/dcb.elf
  dcb_psexe: build/dcb.psexe
  dcb_bin_xml: dcb-iso.xml
  card_table: build/misc/dcb/B.DRV/CARD2.CDD
  deck_table: build/misc/dcb/B.DRV/DECK2.DEK
  mmm_buffer: build/iso/MMM.DAT

  asm_src: dcb-asm/dcb.s
  asm_expanded: build/asm/dcb-expanded.s
  asm_processed: build/asm/dcb.s
  asm_obj: build/asm/dcb.o

# By default built the final binary
default:
  file: build/drv/C.DRV

rules:
  # Compare
  compare:
    deps: [file: $(checksums), deps_file: $compare_deps]
    exec:
      - [$(sha256sum), --check, --quiet, $(checksums)]

  # Compare dependencies
  compare-deps:
    out: [file: $(compare_deps)]
    deps:
      - file: $(checksums)
      - file: $(generate_compare_deps)
      - { file: build/, order_only: true }

    exec:
      - [bash, -c, '$(generate_compare_deps) > $(compare_deps)']

  # Clean
  clean:
    exec:
      - [rm, -r, build/]

  # Directories
  mkdir:
    out: [file: build/^(path)/]
    exec:
      - [mkdir, -p, build/^(path)/]

  # `dcb.bin`
  mkpsxiso:
    out:
      - file: $(dcb_bin)
      - file: build/dcb.cue
    deps: [file: $(dcb_bin_xml), file: license.dat, deps_file: $(dcb_bin).d]
    exec:
      - [$(mkpsxiso), $(dcb_bin), -q, -y]

  # `dcb.bin` dependencies
  mkpsxiso-deps:
    out: [file: $(dcb_bin).d]
    deps: [file: $(dcb_bin_xml)]
    exec:
      - [bash, -c, '$(generate_iso_deps) > $(dcb_bin).d']

  # Cargo tools
  # TODO: Dependencies?
  cargo-tool:
    out: [file: build/tools/^(name)]
    exec:
      - - $(cargo)
        - build
        - --release
        - --manifest-path=tools/Cargo.toml
        - --package=^(name)
        - -Z=unstable-options
        - --out-dir=build/tools

  # `drv`
  mkdrv:
    out: [file: build/drv/^(name).DRV]
    deps:
      - file: ^(name).DRV.yaml
      - file: ^(name).DRV.bspatch
      - { file: build/drv/, order_only: true }
      - deps_file: build/drv/^(name).DRV.d
      - file: $(mkdrv)

    exec:
      - [$(mkdrv), ^(name).DRV.yaml, -o, build/drv/^(name).DRV]
      - - $(bspatch)
        - build/drv/^(name).DRV
        - build/drv/^(name).DRV
        - ^(name).DRV.bspatch

  # `drv` dependencies
  mkdrv-deps:
    out: [file: build/drv/^(path).d]
    deps: [file: ^(path).yaml, file: build/drv/, file: $(mkdrv-deps)]
    exec:
      - - $(mkdrv-deps)
        - ^(path).yaml
        - -o
        - build/drv/^(path)
        - --dep-file
        - build/drv/^(path).d

  # `pak`
  mkpak:
    out: [file: build/pak/^(path)]
    deps:
      - file: ^(path).yaml
      - file: ^(path).bspatch
      - { file: build/pak/, order_only: true }
      - deps_file: build/pak/^(path).d
      - file: $(mkpak)

    exec:
      - [$(mkpak), (path).yaml, -o, build/pak/^(path)]
      - [$(bspatch), build/pak/^(path), build/pak/^(path), ^(path).bspatch]

  # `pak` dependencies
  mkpak-deps:
    out: [file: build/pak/^(path).d]
    deps:
      - file: ^(path).yaml
      - { file: build/pak/, order_only: true }
      - file: $(mkpak-deps)

    exec:
      - - $(mkpak-deps)
        - ^(path).yaml
        - -o
        - build/pak/^(path)
        - --dep-file
        - build/pak/^(path).d

  # `msd`
  mkmsd:
    out: [file: build/msd/^(path), deps_file: build/msd/^(path).d]
    deps:
      - file: ^(path).yaml
      - file: ^(path).bspatch
      - { file: build/msd/, order_only: true }
      - deps_file: build/msd/^(path).d
      - file: $(mkmsd)

    exec:
      - [$(mkmsd), ^(path).yaml, -o, build/msd/^(path)]
      - [$(bspatch), build/msd/^(path), build/msd/^(path), ^(path).bspatch]

  # Card table
  card_table:
    out: [file: $(card_table)]
    deps:
      - file: dcb/B.DRV/CARD2.CDD.json
      - file: dcb/B.DRV/CARD2.CDD.bspatch
      - { file: build/misc/dcb/B.DRV/, order_only: true }
      - file: $(mk-card-table)
    exec:
      - - $(mk-card-table)
        - dcb/B.DRV/CARD2.CDD.json
        - -o
        - $(card_table)

      - - $(bspatch)
        - $(card_table)
        - $(card_table)
        - dcb/B.DRV/CARD2.CDD.bspatch

  # Deck table
  deck_table:
    out: [file: $(deck_table)]
    deps:
      - file: dcb/B.DRV/DECK2.DEK.json
      - file: dcb/B.DRV/DECK2.DEK.bspatch
      - { file: build/misc/dcb/B.DRV/, order_only: true }
      - file: $(mk-deck-table)
    exec:
      - - $(mk-deck-table)
        - dcb/B.DRV/DECK2.DEK.json
        - -o
        - build/misc/dcb/B.DRV/DECK2.DEK

      - - $(bspatch)
        - build/misc/dcb/B.DRV/DECK2.DEK
        - build/misc/dcb/B.DRV/DECK2.DEK
        - dcb/B.DRV/DECK2.DEK.bspatch

  # Buffer
  mmm_buffer:
    out: [file: $(mmm_buffer)]
    deps: [file: build/iso/]
    exec:
      - [touch, $(mmm_buffer)]
      - [truncate, --size=24240128, $(mmm_buffer)]

  # Dylibs
  dylib:
    out: [file: build/dylib/^(name)]
    deps:
      - file: $(dcb_elf)
      - { file: build/dylib/, order_only: true }

    # Note: We make a copy of the `elf` because it seems like `objcopy` messes with the
    #       modification date, which `make` uses to check dependencies
    # TODO: Check if output is right
    exec:
      - [cp, $(dcb_elf), $(dcb_elf).^(name)]
      - - $(objcopy)
        - --dump-section
        - dylib.^(name)=/build/dylib/^(name)
        - $(dcb_elf).^(name)
      - [rm, $(dcb_elf).^(name)]

  # Executable (ps-exe)
  exe_psexe:
    out: [file: $(dcb_psexe)]
    deps:
      - file: $(dcb_elf)
      - file: license-psexe.dat
      - { file: build/, order_only: true }
      - file: $(mkpsexe)
    exec:
      - - $(mkpsexe)
        - $(dcb_elf)
        - -o
        - $(dcb_psexe)
        - --license
        - license-psexe.dat

  # Executable (elf)
  exe_elf:
    out: [file: $(dcb_elf)]

    deps:
      - file: $(asm_obj)
      - file: dcb-rs/build/libdcb.a
      - file: build/symbols.ld
      - file: psx.ld
      - { file: build/, order_only: true }

    exec:
      - - $(ld)
        - $(asm_obj)
        - -o
        - $(dcb_elf)
        - --whole-archive
        - -EL
        - --nmagic
        - --script
        - psx.ld
        - --warn-section-align
        - --no-check-sections
        - -Ldcb-rs/build/
        - -ldcb

  # Linker script symbol ordering
  linker_script_symbols:
    out: [file: build/symbols.ld]
    deps:
      - file: symbols.yaml
      - file: section_addrs.yaml
      - { file: build/, order_only: true }
      - file: $(generate_linker_script)

    exec:
      - [$(generate_linker_script)]

  # Assembly object files
  asm_obj:
    out: [file: $(asm_obj), deps_file: build/asm/dcb.d]

    deps:
      - file: $(asm_processed)
      - { file: build/asm/, order_only: true }

    exec:
      - - $(as)
        - -MD
        - build/asm/dcb.d
        - -o
        - $(asm_obj)
        - -EL
        - -mips1
        - -march=r3000
        - -msoft-float
        - -O2
        - build/asm/dcb.d

  # Processed asm
  process_asm:
    out: [file: $(asm_processed)]
    deps:
      - file: $(asm_expanded)
      - file: symbols.yaml
      - { file: build/asm/, order_only: true }
      - file: $(preprocess_asm)

    exec:
      - - $(preprocess_asm)
        - $(asm_expanded)
        - -o
        - $(asm_processed)
        - --replace-local-labels
        - --add-label-section

  # Expanded asm
  # TODO: Make `expand_asm` emit a dependency file
  expand_asm:
    out: [file: $(asm_expanded)]
    deps:
      - file: $(asm_src)
      - { file: build/asm/, order_only: true }
      - file: $(expand_asm)

    exec:
      - - $(expand_asm)
        - $(asm_src)
        - -o
        - build/asm/
